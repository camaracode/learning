# See more at https://istio.io/docs/reference/config/networking/gateway/
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway-k3s
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: http2
    hosts: # representa o domínio
    - '*' # aceitar tudo

--- 

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: webapp-istio-gateway-vs
spec:
  hosts: # são os services do kubernetes
  - "*" # webapp-istio-gateway-service # utilizar * para compatibilizar com o host do gateway
  gateways:
  - ingress-gateway-k3s # associando virtual service ao gateway
  http:
    # - match: # melhorar a aplicação pra testar essa forma de roteamento
    #   - uri: 
    #       prefix: "/v2" 
    #   route:
    #   - destination:
    #       host: webapp-istio-gateway-service
    #       subset: v2
    # - match: 
    #   - uri: 
    #       prefix: ""
    #   route:
    #   - destination:
    #       host: webapp-istio-gateway-service
    #       subset: v1
  - route:
    - destination:
        host: webapp-istio-gateway-service
        subset: v1
      weight: 50 # peso percentual
    - destination:
        host: webapp-istio-gateway-service
        subset: v2
      weight: 50 # peso percentual
      
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule # IMPORTANTE: posso ter um destinarionrule sem ter um virtualservice, caso não existe, o destinationrule segue o padrão do kubernetes
metadata:
  name: webapp-istio-gateway-dr
spec:
  host: webapp-istio-gateway-service # são os services do kubernetes
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN # esse é o padrão
  subsets:
  - name: v1
    labels:
      version: A # mesma label-version que foi definida no deployment
    trafficPolicy: # definindo um loadbalancer específico pro subset
      loadBalancer:
        simple: LEAST_CONN 
  - name: v2
    labels:
      version: B # mesma label-version que foi definida no deployment    

